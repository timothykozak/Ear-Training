interface Window {
    skipWaiting: any;
    clients: any
}


interface FetchEvent extends Event {
    request: Request;
    respondWith(response: Promise<Response>|Response): Promise<Response>;
}


interface ExtendableEvent extends Event {
    waitUntil(fn: Promise<any>): void;
}

interface InstallEvent extends ExtendableEvent {
    activeWorker: ServiceWorker
}

interface ActivateEvent extends ExtendableEvent {
}

declare var clients: Clients;
declare function fetch(request: Request|string): Promise<Response>;
declare function skipWaiting(): void;

// Client API

interface Client {
    frameType: ClientFrameType;
    id: string;
    url: string;
}

interface Clients {
    claim(): Promise<any>;
    get(id: string): Promise<Client>;
    matchAll(options?: ClientMatchOptions): Promise<Array<Client>>;
    openWindow(url: string): Promise<WindowClient>;
}

interface ClientMatchOptions {
    includeUncontrolled?: boolean;
    type?: ClientMatchTypes;
}

interface WindowClient {
    focused: boolean;
    visibilityState: WindowClientState;
    focus(): Promise<WindowClient>;
    navigate(url: string): Promise<WindowClient>;
}

type ClientFrameType = "auxiliary" | "top-level" | "nested" | "none";
type ClientMatchTypes = "window" | "worker" | "sharedworker" | "all";
type WindowClientState = "hidden" | "visible" | "prerender" | "unloaded";
